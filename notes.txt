React notes


MODULE 3


It uses JSX to return HTML components.

Components make up the whole application or page in react

Each react is basically some HTML which is returned through a function

JSX is the syntax through which we can wrote HTML in JS files

Each sepparate component is stored in a separeate file and that is a rule

Only the root element is rendered directly to the page and the rest and inside one or another ()
nesting

One important rule is that each component should only have one ROOT 
which means that only one parent should be there in a component


each component has its separate css file generally and the css file is imported in the compnent.js file
 in the component file in jsx syntax in HTML elements class is written as className and this className
is taken from the respective css file


as in JS we had ${} in which we can write JS expressions in jSX react we have {} here we can write expressions
or variable names and the value of the those would be used inside the tags

React also has feature called PROPS , it is used to send data between components, as data is needed
to make the page dynamic so data is sent through props by putting it in {}, data is sent as key value pairs
and a single object recives all of it in the receiving functions arguments


V V V imp

props are collection of the data arguments sent or basically group of arguments so ,it is a collection
so the values in it can be accessed only through the name of argument that is being sent


for ex:- <ExpenseItems item={expense[0}/>

then in expense items values can only be accessed through 
props.item.nameofField


props can be used to get the content 
props.children can be used to get the content inside the braces of an component
like a component can be writeen as
<component> the content </component>
so the content between the opening and closing of an component can be used through props.children


STATE is a KEY CONCEPT in REACT


Each component instance has is its own state and all of them are independent of each other

useState is one of the most important hooks in React
It is a function that is imported from the react library 
It is used to declare state  ,these are objects whose value when changed calls the component function of
the component where that particular useState was registered or used and what that results in is
that the if any thing in the view of page has to be changed,it is updated by calling component function again with the updated value

its is used like
 const [name0fState, setNameofState]=useState(initialValueOfState);

useState returns an array which consists of two elements, first one is the pointer to current value of 
state and the seconf=d one is a function that is used to update the value of state

it is called like setNameofState(newValue); after this the component function will be called again
hence updating the view

State change only affects the instance of the component where the the state is changed

and we can have multiple states per component


we can use one state for multiple variables, by passing in an object as value ,then we can use that one function returned to update states like

const [kuchBhi,setKuchBhi]=useState({
                            key1:'',
                            key2:'',
                            key3:''
                                    })

now we can update states by => setKuchBhi((prevState)=>{
                                                        return {...prevState,key1:value};
                                        });

as react automatically gives the prev state and it works even if multiple state updates are working together, thats why this is fail proof

similarly we can do this for the values in the state object and this is the right way to update state when we use only previous state in updating
to the new state 



Two Way Binding :-

Changes made in input should reflect in UI and change smade in Ui should reflect in input

we send data from parents to child through PROPS

IMPPPPP

we send data from child to parents through functions

we send functions through parent to the child through props and then we call those functions at a suitable
palce inside the child with an argument , that argument then reaches the parent and thisw is how we send data from child to parent


Suppose there is a list or an array of components then react will AUTOMATICALLY render the all(They must be placed in {} )

for ex :-  {props.items.map((item)=>{ <Component selected={item.title} /> })};

as we know map return san array so it that array will automatically be rendered 


there can be conditional return statements
meaning that we can return different code on different conditions from the same component
and that is very useful


also we add style through Static Css files but we can also add styling through the jsc code through what is known as 
DYNAMIC STYLING for that what we do is we add style{{}} to a component or HTML elment
style={{}} the outer curly braces are just to show that a value resides inside 
and the other curly braces signify an object

Here it is done through 
style={{
backgroundColor:'red',
height:'20%',
'background-color':'red'}}


styled-components are smart way to style an element ,generally when we use extrnal css files those ss styles are made global hence
if a program or project has multipls developers, they might have used same className for different elements or components and style

henxce a problem will occur in this

styled components give a way of defining styles for a particular elements without the user giving class names
class names are decided by sc hence the above problem is solved

It is also very smart as it uses the props on its own in correct manner

There is another way to make sure that we dont face the above problem that is by using css modules

Css modules are used by changing the name of the xyz.css file to xyz.module.css

then it is imported like import styles from './xyz.module.css'

then inside className={style.acb} , where abc is a className inside xyz.css or className={style[acb]} 


Aswe know that each component can return only one root component , that is why we have to use a lot of divs to get the elements inside
one parent

and this happens with all the components resulting in the react application having a lot of divs
this hampers the performance of react as it has to check every div to check whoch one to render

This can be solved 

1.  By making a wrapper component and in it we return props.children  thats it ,without any wrapping divs
 then we call use it like 
<Wrapper>
    <h2>kuch bhi</h2>
<input type etxt> </input>
<Wrapper/>

what this leads to is a way around the javascript rules


Second way is by using 

<React.Fragment>
<h2>kuch bhi</h2>
<input type etxt> </input>

<React.Fragment>

This is similar to the Wrapper component we made above


Portals

Portals are used to place the JSX code or component in the code at a place we want to this does not have any effect on the functionality of our code

it is just made to make our code symantically correct and clean

it wont be place where we we placed it during the making of our components but at a different place altogether that has been specified by us

to use it

we import ReactDOM from 'react-dom';

then we use 
return 
<React.Fragment>
    ReactDOM.createPortal(<Component/>,dcoument.getElementById('place-where-it-should-be-put');
</React.Fragment>

Hence done


useRef is another hook in React 
It can be used to have a reference to a DOM element in REACT (like we use doucment.getElement or queryselector in VANILAA JS)

so its default value is nothing

ex:-

const nameref=useRef();

then to reference to an element we add ref={nameref} to its attributes ,like this:-

return 
<react.Fragment>
    
    <input ref={nameref} type='text'/>
    <h2>Using a ref</h2>
</react.Fragment>


Now we have a refernce to that input element in nameref
refs always have an current prop in them so for example we access the value of the input by

nameref.current.value

These can be used when we only need to read the data and it is not neccesary to usState there

tThese type of components or elements then come under Uncontrolled elements or componenets because there state is not controlled by REACT directly


MOST IPORTANT after useState

useEffect hook used to deal with Side Effects ,side effects are things that  generally take place out of the scope of a component function like
rendering the changed component happens inside its scope but Fetching some data or calling an api http request are all out of the scope of the
component function 


V V V imp  :- It is also used when we want to re rerun some logic when a particular thing is chamged

useeffect helps in dealing with code which should be executed in response to something

So these are handled inside the useEffect like for example we need to send a http request once the page loads ,so there's no point in semding the request 
each time an component is re-rendered so we can put it in useEffect


in the function inside the useEffect we can return a function which is called CLEANUP Function , this fuction runs everytime before the execution of the useeffect function except when the copmponent is loaded for the first time in the page

this means suppose we load a page then the CLEANUP func wont run because obviously there wouldnt be anything to CLEANUP as it rums before the USEeffect function'and till that time the useEffect function wouldnt have ran.


Syntax =>

useEffect(()=>{ Function which runs at each rendering if dependences are change},[dependencies are kept here]);




useReducer is also a react hook which is used for State Management like useState ,
we use useReducer in conditions where we think that the state is complex ex : - a state made after combining multiple states , 
or a state which needs complex instructions before updating

In these type of cases we prefer using useReducer

like when we have a complex state updating logic

SYNTAX:-

const [xyzState,dispatchXyzState]=useReducer(func1,intialState,intialFunc);

It also returns 2 object one is the state snapshot and the second is the dispacth function
the dispacth function is used to dispacth a action or to send data or value to func1 acccording to whic the state will beupdateed

the func1 then uses the info given it to from dispacth function to return the updated state

the func1 takes two areguments first is the prevState and the second one is the action from the dispacth unction

EX:- 

 const [emailState,dispatchEmailState] =useReducer(emailReducer,{val:'',isValid:null});

      dispatchEmailState({type:'USER_INPUT',val:event.target.value});

 

const emailReducer=(prevState,action)=>{

  if(action.type==='USER_INPUT'){
    return {val:action.val,isValid: action.val.includes('@')};
  }
  else if(action.type==='INPUT_BLUR'){
    return {val:prevState.val,isValid:prevState.isValid};
  }
 return {val:'',isValid:false};

}





  



