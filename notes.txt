React notes


MODULE 3


It uses JSX to return HTML components.

Components make up the whole application or page in react

Each react is basically some HTML which is returned through a function

JSX is the syntax through which we can wrote HTML in JS files

Each sepparate component is stored in a separeate file and that is a rule

Only the root element is rendered directly to the page and the rest and inside one or another ()
nesting

One important rule is that each component should only have one ROOT 
which means that only one parent should be there in a component


each component has its separate css file generally and the css file is imported in the compnent.js file
 in the component file in jsx syntax in HTML elements class is written as className and this className
is taken from the respective css file


as in JS we had ${} in which we can write JS expressions in jSX react we have {} here we can write expressions
or variable names and the value of the those would be used inside the tags

React also has feature called PROPS , it is used to send data between components, as data is needed
to make the page dynamic so data is sent through props by putting it in {}, data is sent as key value pairs
and a single object recives all of it in the receiving functions arguments


V V V imp

props are collection of the data arguments sent or basically group of arguments so ,it is a collection
so the values in it can be accessed only through the name of argument that is being sent


for ex:- <ExpenseItems item={expense[0}/>

then in expense items values can only be accessed through 
props.item.nameofField


props can be used to get the content 
props.children can be used to get the content inside the braces of an component
like a component can be writeen as
<component> the content </component>
so the content between the opening and closing of an component can be used through props.children


STATE is a KEY CONCEPT in REACT


Each component instance has is its own state and all of them are independent of each other

useState is one of the most important hooks in React
It is a function that is imported from the react library 
It is used to declare state  ,these are objects whose value when changed calls the component function of
the component where that particular useState was registered or used and what that results in is
that the if any thing in the view of page has to be changed,it is updated by calling component function again with the updated value

its is used like
 const [name0fState, setNameofState]=useState(initialValueOfState);

useState returns an array which consists of two elements, first one is the pointer to current value of 
state and the seconf=d one is a function that is used to update the value of state

it is called like setNameofState(newValue); after this the component function will be called again
hence updating the view

State change only affects the instance of the component where the the state is changed

and we can have multiple states per component


we can use one state for multiple variables, by passing in an object as value ,then we can use that one function returned to update states like

const [kuchBhi,setKuchBhi]=useState({
                            key1:'',
                            key2:'',
                            key3:''
                                    })

now we can update states by => setKuchBhi((prevState)=>{
                                                        return {...prevState,key1:value};
                                        });

as react automatically gives the prev state and it works even if multiple state updates are working together, thats why this is fail proof

similarly we can do this for the values in the state object and this is the right way to update state when we use only previous state in updating
to the new state 



Two Way Binding :-

Changes made in input should reflect in UI and change smade in Ui should reflect in input

we send data from parents to child through PROPS

IMPPPPP

we send data from child to parents through functions

we send functions through parent to the child through props and then we call those functions at a suitable
palce inside the child with an argument , that argument then reaches the parent and thisw is how we send data from child to parent






